version: '3.8'
services:
  db:
    image: postgres
    container_name: postgress
    environment:
      POSTGRES_DB: productservice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data


  minio:
    image: minio/minio
    container_name: minio
    restart: always
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: your_access_key
      MINIO_SECRET_KEY: your_secret_key
    volumes:
      - ./minio-data:/data


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181


  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


  elasticsearch:
    image: elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - validate_after_inactivity=0
      - max_open_files=65536
      - max_content_length_in_bytes=100000000
      - transport.host=elasticsearch
      - xpack.security.enabled=false
    volumes:
      - $HOME/app:/var/app
    ports:
      - "9200:9200"
      - "9300:9300"


  productservice:
    container_name: productservice
    image: productservice
    ports:
      - "8084:8084"
    depends_on:
      - db
      - minio
      - zookeeper
      - kafka
    environment:
      - spring.datasource.url=jdbc:postgresql://db/productservice?useSSL=false&createDatabaseIfNotExist=true
      - minio.url=http://minio:9000
      - kafka.url=http://kafka:29092


  cartapi:
    container_name: cartapi
    image: cartapi
    ports:
      - "8086:8086"
    depends_on:
      - db
      - kafka
    environment:
      - spring.datasource.url=jdbc:postgresql://db/cartapi?useSSL=false&createDatabaseIfNotExist=true



  productqueryservice:
    container_name: productqueryservice
    image: productqueryservice
    ports:
      - "8085:8085"
    depends_on:
      - elasticsearch
      - kafka
    environment:
      - elasticsearch.host=elasticsearch
      - elasticsearch.port=9200
      - kafka.url=http://kafka:29092
    restart: always



  authservice:
    container_name: authservice
    image: authservice
    ports:
      - "8083:8083"
    depends_on:
      - db
    environment:
      - spring.datasource.url=jdbc:postgresql://db/authservice?useSSL=false&createDatabaseIfNotExist=true



networks:
  my-network:
